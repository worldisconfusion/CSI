# -*- coding: utf-8 -*-
"""Python Pattern Generator

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_PFx0JfSg39XeUjuISLfpkeY3aoMpFae
"""

#
# A menu-driven program to print various star patterns.
#

def lower_triangular(rows):
    """
    Prints a lower triangular pattern of '*' for the given number of rows.

    For example, with rows=5, the output is:
    *
    * *
    * * *
    * * * *
    * * * * *

    Args:
        rows (int): The number of rows for the pattern.
    """
    if rows <= 0:
        print("Please enter a positive number of rows.")
        return
    # Loop from 1 to 'rows' (inclusive)
    for i in range(1, rows + 1):
        # Print '*' i times, followed by a space for better formatting
        print("* " * i)

def upper_triangular(rows):
    """
    Prints an upper triangular pattern of '*' for the given number of rows.

    For example, with rows=5, the output is:
    * * * * *
    * * * *
    * * *
    * *
    *

    Args:
        rows (int): The number of rows for the pattern.
    """
    if rows <= 0:
        print("Please enter a positive number of rows.")
        return
    # Loop from 'rows' down to 1 (inclusive)
    for i in range(rows, 0, -1):
        # Print '*' i times, followed by a space
        print("* " * i)

def pyramid(rows):
    """
    Prints a pyramid pattern of '*' for the given number of rows.

    For example, with rows=5, the output is:
        *
       * *
      * * *
     * * * *
    * * * * *

    Args:
        rows (int): The number of rows for the pattern.
    """
    if rows <= 0:
        print("Please enter a positive number of rows.")
        return
    # Loop from 0 to 'rows'-1
    for i in range(rows):
        # Print leading spaces for alignment
        # The number of spaces decreases as we go down the rows
        print(" " * (rows - i - 1), end="")
        # Print the stars for the current row
        print("* " * (i + 1))

def get_rows_from_user():
    """
    Prompts the user to enter the number of rows and handles invalid input.

    Returns:
        int: The number of rows entered by the user, or None if input is invalid.
    """
    try:
        num_rows = int(input("Enter the number of rows: "))
        return num_rows
    except ValueError:
        print("Invalid input. Please enter a whole number.")
        return None

def main():
    """
    The main function to run the menu-driven program.
    """
    while True:
        # Display the menu options to the user
        print("\n" + "="*30)
        print("      PATTERN GENERATOR")
        print("="*30)
        print("1. Lower Triangular Pattern")
        print("2. Upper Triangular Pattern")
        print("3. Pyramid Pattern")
        print("4. Exit")
        print("-"*30)

        # Get the user's choice
        choice = input("Enter your choice (1-4): ")

        if choice in ['1', '2', '3']:
            rows = get_rows_from_user()
            if rows is not None:
                print() # Add a newline for spacing
                if choice == '1':
                    lower_triangular(rows)
                elif choice == '2':
                    upper_triangular(rows)
                elif choice == '3':
                    pyramid(rows)
        elif choice == '4':
            print("Exiting the program. Goodbye!")
            break # Exit the while loop
        else:
            print("Invalid choice. Please enter a number between 1 and 4.")

# This ensures the main() function is called only when the script is executed directly
if __name__ == "__main__":
    main()
