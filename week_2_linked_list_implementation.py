# -*- coding: utf-8 -*-
"""WEEK_2_Linked List Implementation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_PFx0JfSg39XeUjuISLfpkeY3aoMpFae
"""

class Node:
    """
    Represents a single node in the linked list.
    """
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    """
    Manages the linked list operations.
    """
    def __init__(self):
        self.head = None

    def add_node(self, data):
        """
        Adds a new node to the end of the list.
        """
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            return
        last_node = self.head
        while last_node.next:
            last_node = last_node.next
        last_node.next = new_node

    def print_list(self):
        """
        Prints the elements of the list.
        """
        current_node = self.head
        while current_node:
            print(current_node.data, end=" -> ")
            current_node = current_node.next
        print("None")

    def delete_nth_node(self, n):
        """
        Deletes the nth node from the list (1-based index).
        """
        if not self.head:
            raise ValueError("Cannot delete from an empty list.")

        # Case 1: Deleting the head node
        if n == 1:
            self.head = self.head.next
            return

        # Case 2: Deleting a node other than the head
        current_node = self.head
        prev_node = None
        count = 1
        while current_node and count != n:
            prev_node = current_node
            current_node = current_node.next
            count += 1

        if not current_node:
            raise IndexError("Index out of range.")

        prev_node.next = current_node.next

# --- Test Cases ---
if __name__ == "__main__":
    # Create a new linked list
    ll = LinkedList()

    # Add nodes to the list
    ll.add_node(10)
    ll.add_node(20)
    ll.add_node(30)
    ll.add_node(40)
    ll.add_node(50)

    print("Original List:")
    ll.print_list()

    # --- Deletion Tests ---
    try:
        # Delete the 3rd node (value 30)
        print("\nDeleting the 3rd node...")
        ll.delete_nth_node(3)
        ll.print_list()

        # Delete the head node (value 10)
        print("\nDeleting the 1st node...")
        ll.delete_nth_node(1)
        ll.print_list()

        # Attempt to delete a node with an out-of-range index
        print("\nAttempting to delete the 5th node (which is out of range)...")
        ll.delete_nth_node(5)
    except (ValueError, IndexError) as e:
        print(f"Error: {e}")

    # --- Test with an empty list ---
    print("\n--- Testing with an empty list ---")
    empty_ll = LinkedList()
    print("Empty List:")
    empty_ll.print_list()
    try:
        print("\nAttempting to delete from an empty list...")
        empty_ll.delete_nth_node(1)
    except (ValueError, IndexError) as e:
        print(f"Error: {e}")